{"version":3,"sources":["sample.css","sample.scss","_grid.scss","node_modules/sass-mq/_mq.scss"],"names":[],"mappings":"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","file":"sample.css","sourcesContent":["@charset \"UTF-8\";\n/* ------------------------------------------------------------------------------\n  Imports\n------------------------------------------------------------------------------ */\n/*------------------------------------------------------------\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░▓▓▓▓▓▓░░░▓▓▓▓▓▓░░░▓▓▓▓▓▓░░▓▓▓▓▓▓░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░▓▓░░░░░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░\n░░░░░░░░░░░░▓▓░░▓▓▓▓░░▓▓▓▓▓▓░░░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░\n░░░░░░░░░░░░▓▓░░░░▓▓░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░▓▓▓▓▓▓░░▓▓░░░░▓▓░░▓▓▓▓▓▓░░▓▓▓▓▓▓░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n\nGrid is a library created by Levi Beach (http://levibeach.com)\nBased on a system by Hugo Giraudel (https://github.com/HugoGiraudel)\nIt relies on `calc()` (http://caniuse.com/#search=calc)\nand advanced CSS selectors (http://caniuse.com/#feat=css-sel3).\n\nExpect it to work on IE9+, Android 4.4+ and modern browsers\n------------------------------------------------------------*/\n@import url(https://fonts.googleapis.com/css?family=Roboto+Mono:400,100,700,500,400italic,100italic,300,300italic,500italic,700italic);\n.grid1-item-1, .grid1-item-2, .grid1-item-3, .grid1-item-4, .grid1-item-5, .grid1-item-6, .grid1-item-7, .grid1-item-8, .grid1-item-9, .grid1-item-10, .grid1-item-11, .grid1-item-12, .grid2-item-6, .grid2-item-3, .grid2-item-4, .grid3 > .grid-item, .grid4 > .grid-item, .grid5 > .grid-item, .grid6 > .grid-item {\n  box-sizing: border-box; }\n\n/*------------------------------------------------------------\nEXAMPLE:\n.grid-container-element {\n  $grid-children: '.grid-column-element' !global;\n  @include grid-container();\n  @include grid(1, 2, 4, 5);\n}\n.grid-column-element {\n  ...\n}\n\nThe above styles will result in a .grid-container-element which\nhas 4 columns and the layout will be something like this:\n\n| 1 |  2  |    4    |     5     |\n\n------------------------------------------------------------*/\n/* ------------------------------------------------------------------------------\n  Variables\n------------------------------------------------------------------------------ */\n.grid1-item-1, .grid1-item-2, .grid1-item-3, .grid1-item-4, .grid1-item-5, .grid1-item-6, .grid1-item-7, .grid1-item-8, .grid1-item-9, .grid1-item-10, .grid1-item-11, .grid1-item-12, .grid2-item-6, .grid2-item-3, .grid2-item-4, .grid3 .grid-item, .grid4 .grid-item, .grid5 .grid-item {\n  background-color: blue;\n  height: 100px;\n  margin-bottom: 24px; }\n  @media (max-width: 46.24em) {\n    .grid1-item-1, .grid1-item-2, .grid1-item-3, .grid1-item-4, .grid1-item-5, .grid1-item-6, .grid1-item-7, .grid1-item-8, .grid1-item-9, .grid1-item-10, .grid1-item-11, .grid1-item-12, .grid2-item-6, .grid2-item-3, .grid2-item-4, .grid3 .grid-item, .grid4 .grid-item, .grid5 .grid-item {\n      height: 25px; } }\n\n/* ------------------------------------------------------------------------------\n  Typography\n------------------------------------------------------------------------------ */\nbody {\n  font-family: Roboto Mono, monospace;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 5%;\n  color: blue; }\n\nh1 {\n  font-size: 100px;\n  font-weight: 100;\n  text-transform: uppercase; }\n\nh2 {\n  font-weight: 300;\n  font-size: 2em; }\n  @media (max-width: 46.24em) {\n    h2 {\n      font-weight: 500;\n      font-size: 1em; } }\n\nhr {\n  border-top: 1px solid rgba(0, 0, 255, 0.25);\n  border-left: none;\n  border-right: none;\n  border-bottom: none; }\n\n/* ------------------------------------------------------------------------------\n  Example #1 - 12 columns\n------------------------------------------------------------------------------ */\n.grid1 {\n  overflow: hidden; }\n\n.grid1-item-1, .grid1-item-2, .grid1-item-3, .grid1-item-4, .grid1-item-5, .grid1-item-6, .grid1-item-7, .grid1-item-8, .grid1-item-9, .grid1-item-10, .grid1-item-11, .grid1-item-12 {\n  float: left;\n  margin-right: 24px;\n  width: calc(100% * 0.08333 - 24px * (1 - 0.08333)); }\n\n.grid1-item-12 {\n  margin-right: 0; }\n\n/* ------------------------------------------------------------------------------\n  Example #2 - Column spanning\n------------------------------------------------------------------------------ */\n.grid2 {\n  overflow: hidden; }\n\n.grid2-item-6 {\n  float: left;\n  margin-right: 24px;\n  width: calc(100% * 0.5 - 24px * (1 - 0.5)); }\n  .grid2-item-6 + .grid2-item-6 {\n    margin-right: 0; }\n\n.grid2-item-3 {\n  float: left;\n  margin-right: 24px;\n  width: calc(100% * 0.25 - 24px * (1 - 0.25)); }\n  .grid2-item-3 + .grid2-item-3 + .grid2-item-3 + .grid2-item-3 {\n    margin-right: 0; }\n\n.grid2-item-4 {\n  float: left;\n  margin-right: 24px;\n  width: calc(100% * 0.33333 - 24px * (1 - 0.33333)); }\n  .grid2-item-4 + .grid2-item-4 + .grid2-item-4 {\n    margin-right: 0; }\n\n/* ------------------------------------------------------------------------------\n  Example #3 - Repeating\n------------------------------------------------------------------------------ */\n.grid3 {\n  overflow: hidden; }\n  .grid3 > .grid-item {\n    float: left;\n    margin-right: 24px; }\n    .grid3 > .grid-item:nth-of-type(4n + 1) {\n      width: calc(100% * 1 / 12 - 24px * (1 - 1 / 12)); }\n    .grid3 > .grid-item:nth-of-type(4n + 2) {\n      width: calc(100% * 2 / 12 - 24px * (1 - 2 / 12)); }\n    .grid3 > .grid-item:nth-of-type(4n + 3) {\n      width: calc(100% * 3 / 12 - 24px * (1 - 3 / 12)); }\n    .grid3 > .grid-item:nth-of-type(4n + 4) {\n      width: calc(100% * 6 / 12 - 24px * (1 - 6 / 12)); }\n    .grid3 > .grid-item:nth-of-type(4n + 4) {\n      margin-right: 0; }\n\n/* ------------------------------------------------------------------------------\n  Example #4 - Random-looking\n------------------------------------------------------------------------------ */\n.grid4 {\n  overflow: hidden; }\n  .grid4 > .grid-item {\n    float: left;\n    margin-right: 24px; }\n    .grid4 > .grid-item:nth-of-type(5n + 1) {\n      width: calc(100% * 1 / 12 - 24px * (1 - 1 / 12)); }\n    .grid4 > .grid-item:nth-of-type(5n + 2) {\n      width: calc(100% * 2 / 12 - 24px * (1 - 2 / 12)); }\n    .grid4 > .grid-item:nth-of-type(5n + 3) {\n      width: calc(100% * 3 / 12 - 24px * (1 - 3 / 12)); }\n    .grid4 > .grid-item:nth-of-type(5n + 4) {\n      width: calc(100% * 1 / 12 - 24px * (1 - 1 / 12)); }\n    .grid4 > .grid-item:nth-of-type(5n + 5) {\n      width: calc(100% * 2 / 12 - 24px * (1 - 2 / 12)); }\n    .grid4 > .grid-item:nth-of-type(5n + 5) {\n      margin-right: 0; }\n\n/* ------------------------------------------------------------------------------\n  Example #5 - No gutters\n------------------------------------------------------------------------------ */\n.grid5 {\n  overflow: hidden; }\n  .grid5 > .grid-item {\n    float: left;\n    margin-right: 0px; }\n    .grid5 > .grid-item:nth-of-type(3n + 1) {\n      width: calc(100% * 4 / 12 - 0px * (1 - 4 / 12)); }\n    .grid5 > .grid-item:nth-of-type(3n + 2) {\n      width: calc(100% * 4 / 12 - 0px * (1 - 4 / 12)); }\n    .grid5 > .grid-item:nth-of-type(3n + 3) {\n      width: calc(100% * 4 / 12 - 0px * (1 - 4 / 12)); }\n    .grid5 > .grid-item:nth-of-type(3n + 3) {\n      margin-right: 0; }\n  .grid5 .grid-item {\n    border: 1px solid white;\n    margin-bottom: 0; }\n\n/* ------------------------------------------------------------------------------\n  Example #6 - Responsive\n------------------------------------------------------------------------------ */\n.grid6 {\n  overflow: hidden; }\n  @media (max-width: 46.24em) {\n    .grid6 > .grid-item {\n      float: left;\n      margin-right: 24px; }\n      .grid6 > .grid-item:nth-of-type(1n + 1) {\n        width: calc(100% * 12 / 12 - 24px * (1 - 12 / 12)); }\n      .grid6 > .grid-item:nth-of-type(1n + 1) {\n        margin-right: 0; } }\n  @media (min-width: 46.25em) and (max-width: 61.24em) {\n    .grid6 > .grid-item {\n      float: left;\n      margin-right: 24px; }\n      .grid6 > .grid-item:nth-of-type(2n + 1) {\n        width: calc(100% * 6 / 12 - 24px * (1 - 6 / 12)); }\n      .grid6 > .grid-item:nth-of-type(2n + 2) {\n        width: calc(100% * 6 / 12 - 24px * (1 - 6 / 12)); }\n      .grid6 > .grid-item:nth-of-type(2n + 2) {\n        margin-right: 0; } }\n  @media (min-width: 61.25em) and (max-width: 81.24em) {\n    .grid6 > .grid-item {\n      float: left;\n      margin-right: 24px; }\n      .grid6 > .grid-item:nth-of-type(3n + 1) {\n        width: calc(100% * 4 / 12 - 24px * (1 - 4 / 12)); }\n      .grid6 > .grid-item:nth-of-type(3n + 2) {\n        width: calc(100% * 4 / 12 - 24px * (1 - 4 / 12)); }\n      .grid6 > .grid-item:nth-of-type(3n + 3) {\n        width: calc(100% * 4 / 12 - 24px * (1 - 4 / 12)); }\n      .grid6 > .grid-item:nth-of-type(3n + 3) {\n        margin-right: 0; } }\n  @media (min-width: 81.25em) {\n    .grid6 > .grid-item {\n      float: left;\n      margin-right: 24px; }\n      .grid6 > .grid-item:nth-of-type(4n + 1) {\n        width: calc(100% * 3 / 12 - 24px * (1 - 3 / 12)); }\n      .grid6 > .grid-item:nth-of-type(4n + 2) {\n        width: calc(100% * 3 / 12 - 24px * (1 - 3 / 12)); }\n      .grid6 > .grid-item:nth-of-type(4n + 3) {\n        width: calc(100% * 3 / 12 - 24px * (1 - 3 / 12)); }\n      .grid6 > .grid-item:nth-of-type(4n + 4) {\n        width: calc(100% * 3 / 12 - 24px * (1 - 3 / 12)); }\n      .grid6 > .grid-item:nth-of-type(4n + 4) {\n        margin-right: 0; } }\n  .grid6 .grid-item {\n    background-color: blue;\n    height: 100px;\n    margin-bottom: 24px; }\n    @media (max-width: 46.24em) {\n      .grid6 .grid-item {\n        margin-bottom: 6px;\n        height: 25px; } }\n","/* ------------------------------------------------------------------------------\n  Imports\n------------------------------------------------------------------------------ */\n// get our grid stuff because that's why we're here!\n@import '_grid.scss';\n\n// including Sass MQ because... it’s pretty great!\n@import 'node_modules/sass-mq/_mq.scss';\n\n/* ------------------------------------------------------------------------------\n  Variables\n------------------------------------------------------------------------------ */\n$color-primary: blue;\n\n// Grid configuration\n$grid-gutters: 24px !global;\n$grid-columns: 12 !global;\n$grid-children: '.grid-item' !global;\n\n%grid-block {\n  background-color: $color-primary;\n  height: 100px;\n  margin-bottom: $grid-gutters;\n  @include mq($until:tablet) {\n    height: 25px;\n  }\n}\n\n/* ------------------------------------------------------------------------------\n  Typography\n------------------------------------------------------------------------------ */\n// grabbing a great monospaced font from Google\n@import url(https://fonts.googleapis.com/css?family=Roboto+Mono:400,100,700,500,400italic,100italic,300,300italic,500italic,700italic);\n\nbody {\n  font-family: Roboto Mono, monospace;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 5%;\n  color: $color-primary;\n}\nh1 {\n  font-size: 100px;\n  font-weight: 100;\n  text-transform: uppercase;\n}\nh2 {\n  font-weight: 300;\n  font-size: 2em;\n  @include mq($until:tablet) {\n    font-weight: 500;\n    font-size: 1em;\n  }\n}\nhr {\n  border-top: 1px solid rgba($color-primary,.25);\n  border-left: none;\n  border-right: none;\n  border-bottom: none;\n}\n/* ------------------------------------------------------------------------------\n  Example #1 - 12 columns\n------------------------------------------------------------------------------ */\n.grid1 {\n  @include grid-container;\n}\n\n%grid1-item {\n  @include grid-col(1);\n}\n\n@for $i from 1 through 12 {\n  .grid1-item-#{$i} {\n    @extend %grid-block;\n    @extend %grid1-item;\n    @if $i == 12 {\n      @include grid-col-omega;\n    }\n  }\n}\n\n/* ------------------------------------------------------------------------------\n  Example #2 - Column spanning\n------------------------------------------------------------------------------ */\n.grid2 {\n  @include grid-container;\n}\n.grid2-item-6 {\n  @extend %grid-block;\n  @include grid-col(6);\n  &+ .grid2-item-6 {\n    @include grid-col-omega;\n  }\n}\n.grid2-item-3 {\n  @extend %grid-block;\n  @include grid-col(3);\n  &+ .grid2-item-3 + .grid2-item-3 + .grid2-item-3 {\n    @include grid-col-omega;\n  }\n}\n.grid2-item-4 {\n  @extend %grid-block;\n  @include grid-col(4);\n  &+ .grid2-item-4 + .grid2-item-4 {\n    @include grid-col-omega;\n  }\n}\n\n/* ------------------------------------------------------------------------------\n  Example #3 - Repeating\n------------------------------------------------------------------------------ */\n.grid3 {\n  @include grid-container;\n  @include grid(1, 2, 3, 6);\n  .grid-item {\n    @extend %grid-block;\n  }\n}\n\n/* ------------------------------------------------------------------------------\n  Example #4 - Random-looking\n------------------------------------------------------------------------------ */\n.grid4 {\n  @include grid-container;\n  @include grid(1, 2, 3, 1, 2);\n  .grid-item {\n    @extend %grid-block;\n  }\n}\n\n/* ------------------------------------------------------------------------------\n  Example #5 - No gutters\n------------------------------------------------------------------------------ */\n.grid5 {\n  $grid-gutters: 0px !global;\n  @include grid-container;\n  @include grid(4, 4, 4);\n  .grid-item {\n    @extend %grid-block;\n    border: 1px solid white;\n    margin-bottom: 0; // have to manually overide this because we set it early\n  }\n}\n\n/* ------------------------------------------------------------------------------\n  Example #6 - Responsive\n------------------------------------------------------------------------------ */\n.grid6 {\n  $grid-gutters: 24px !global; // resetting the gutters\n  @include grid-container;\n  @include mq($until: tablet) {\n    @include grid(12);\n  }\n  @include mq($from:tablet,$until:desktop) {\n    @include grid(6, 6);\n  }\n  @include mq($from:desktop,$until:wide) {\n    @include grid(4, 4, 4);\n  }\n  @include mq($from:wide) {\n    @include grid(3, 3, 3, 3);\n  }\n  .grid-item {\n    // not gonna extend this one\n    background-color: $color-primary;\n    height: 100px;\n    margin-bottom: $grid-gutters;\n    @include mq($until:tablet) {\n      margin-bottom: 6px;\n      height: 25px;\n    }\n  }\n}\n","/*------------------------------------------------------------\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░▓▓▓▓▓▓░░░▓▓▓▓▓▓░░░▓▓▓▓▓▓░░▓▓▓▓▓▓░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░▓▓░░░░░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░\n░░░░░░░░░░░░▓▓░░▓▓▓▓░░▓▓▓▓▓▓░░░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░\n░░░░░░░░░░░░▓▓░░░░▓▓░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░▓▓░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░▓▓▓▓▓▓░░▓▓░░░░▓▓░░▓▓▓▓▓▓░░▓▓▓▓▓▓░░░░░░░░░░░░░░░░\n░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n\nGrid is a library created by Levi Beach (http://levibeach.com)\nBased on a system by Hugo Giraudel (https://github.com/HugoGiraudel)\nIt relies on `calc()` (http://caniuse.com/#search=calc)\nand advanced CSS selectors (http://caniuse.com/#feat=css-sel3).\n\nExpect it to work on IE9+, Android 4.4+ and modern browsers\n------------------------------------------------------------*/\n\n// Grid configuration\n$grid-gutters: 10px !default;\n$grid-columns: 12 !default;\n$grid-children: 'div' !default;\n\n// Need to make sure that we are dealing with bordered-box sizing\n// otherwise things will get crazy.\n%grid-bb {\n  box-sizing: border-box;\n}\n\n// Include one of these on the grid's parent element/wrapper\n@mixin grid-container {\n  overflow: hidden;\n}\n\n@mixin grid-clearfix {\n  *zoom: 1;\n  &:before,\n  &:after {\n    content: \" \";\n    display: table;\n  }\n  &:after {\n    clear: both;\n  }\n}\n\n/*------------------------------------------------------------\nEXAMPLE:\n.grid-container-element {\n  $grid-children: '.grid-column-element' !global;\n  @include grid-container();\n  @include grid(1, 2, 4, 5);\n}\n.grid-column-element {\n  ...\n}\n\nThe above styles will result in a .grid-container-element which\nhas 4 columns and the layout will be something like this:\n\n| 1 |  2  |    4    |     5     |\n\n------------------------------------------------------------*/\n@mixin grid($cols...) {\n\n  // Set styles for the child element\n  &> #{$grid-children} {\n    @extend %grid-bb;\n    float: left;\n    margin-right: $grid-gutters;\n\n    // Setting columns\n    @for $i from 1 through length($cols) {\n      &:nth-of-type(#{length($cols)}n + #{$i}) {\n        $multiplier: #{nth($cols, $i)} / $grid-columns;\n        width: calc(100% * #{$multiplier} - #{$grid-gutters} * (1 - #{$multiplier}));\n      }\n    }\n    // Clear the right margin on last element from each row\n    &:nth-of-type(#{length($cols)}n + #{length($cols)}) {\n      margin-right: 0;\n    }\n  }\n}\n\n// For those moments when you just need to align an element to the grid...\n@mixin grid-col($cols) {\n  @extend %grid-bb;\n  $multiplier: $cols / $grid-columns;\n  float: left;\n  margin-right: $grid-gutters;\n  width: calc(100% * #{$multiplier} - #{$grid-gutters} * (1 - #{$multiplier}));\n}\n\n// For when you need to clear the margin on the last element of a row\n// Primarily for use with grid-col(); but could be used wherever\n// you don't want to have a rigth margin.\n@mixin grid-col-omega() {\n  margin-right: 0;\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n"],"sourceRoot":"/source/"}